#
define patterndb::simple::ruleset (
  Pattern['\A\d+-\d+-\d+\z'] $pubdate,
  String[1] $id                 = $name,
  Array[String[1]] $patterns    = [],
  Array[Patterndb::Rule] $rules = [],
  String[1] $parser             = 'default',
  Integer $version              = if versioncmp($facts['syslog_ng_version'], '4.0.0') >= 0 {
    6
  } else {
    4
  },
  String[1] $description        = 'generated by puppet',
  Optional[String[1]] $url      = undef,
  Optional[String[1]] $order    = undef,
) {
  if ! defined(Class['Patterndb']) {
    include patterndb
  }

  if ! defined(Patterndb::Parser[$parser]) {
    patterndb::parser { $parser:
      test_before_deploy => $patterndb::test_before_deploy,
      syslogng_modules   => $patterndb::syslogng_modules,
    }
  }

  $pdb_file = "${patterndb::pdb_dir}/${parser}/${order}${name}.pdb"

  concat { "patterndb_simple_ruleset-${title}":
    path   => $pdb_file,
    notify => Exec["patterndb::merge::${parser}"],
  }

  concat::fragment { "patterndb_simple_ruleset-${title}-header":
    target  => "patterndb_simple_ruleset-${title}",
    content => template('patterndb/ruleset-header.erb'),
    order   => '001',
  }
  concat::fragment { "patterndb_simple_ruleset-${title}-footer":
    target  => "patterndb_simple_ruleset-${title}",
    content => template('patterndb/ruleset-footer.erb'),
    order   => 'zzz',
  }

  if (! empty($rules)) { # monolithic ruleset definition
    # import embedded rules
    patterndb_simple_rule ($name, $rules)
  }
}
